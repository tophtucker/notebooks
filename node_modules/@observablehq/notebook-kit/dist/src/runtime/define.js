import { clear, display, observe } from "./display.js";
import { main } from "./index.js";
import { input } from "./stdlib/generators/index.js";
import { Mutator } from "./stdlib/mutable.js";
export function define(state, definition, observer = observe) {
    const { id, body, inputs = [], outputs = [], output, autodisplay, autoview, automutable } = definition;
    const variables = state.variables;
    const v = main.variable(observer(state, definition), { shadow: {} });
    const vid = output ?? (outputs.length ? `cell ${id}` : null);
    if (inputs.includes("display") || inputs.includes("view")) {
        let displayVersion = -1; // the variable._version of currently-displayed values
        const vd = new v.constructor(2, v._module);
        vd.define(inputs.filter((i) => i !== "display" && i !== "view"), () => {
            const version = v._version; // capture version on input change
            return (value) => {
                if (version < displayVersion)
                    throw new Error("stale display");
                else if (state.variables[0] !== v)
                    throw new Error("stale display");
                else if (version > displayVersion)
                    clear(state);
                displayVersion = version;
                display(state, value);
                return value;
            };
        });
        v._shadow.set("display", vd);
        if (inputs.includes("view")) {
            const vv = new v.constructor(2, v._module, null, { shadow: {} });
            vv._shadow.set("display", vd);
            vv.define(["display"], (display) => (value) => input(display(value)));
            v._shadow.set("view", vv);
        }
    }
    else if (!autodisplay) {
        clear(state);
    }
    variables.push(v.define(vid, inputs, body));
    if (output != null) {
        if (autoview) {
            const o = unprefix(output, "viewof$");
            variables.push(main.define(o, [output], input));
        }
        else if (automutable) {
            const o = unprefix(output, "mutable ");
            const x = `cell ${id}`;
            v.define(o, [x], ([mutable]) => mutable); // observe live value
            variables.push(main.define(output, inputs, body), // initial value
            main.define(x, [output], Mutator), main.define(`mutable$${o}`, [x], ([, mutator]) => mutator));
        }
    }
    else {
        for (const o of outputs) {
            variables.push(main.variable(true).define(o, [vid], (exports) => exports[o]));
        }
    }
}
function unprefix(name, prefix) {
    if (!name.startsWith(prefix))
        throw new Error(`expected ${prefix}: ${name}`);
    return name.slice(prefix.length);
}
