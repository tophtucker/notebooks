import { Inspector } from "@observablehq/inspector";
export function inspect(value, expanded) {
    const node = document.createElement("div");
    new Inspector(node).fulfilled(value); // TODO name?
    if (expanded) {
        for (const path of expanded) {
            let child = node;
            for (const i of path)
                child = child?.childNodes[i];
            child?.dispatchEvent(new Event("mouseup")); // restore expanded state
        }
    }
    return node;
}
export function inspectError(value) {
    const node = document.createElement("div");
    new Inspector(node).rejected(value);
    return node;
}
export function getExpanded(node) {
    if (!isInspector(node))
        return;
    const expanded = node.querySelectorAll(".observablehq--expanded");
    if (expanded.length)
        return Array.from(expanded, (e) => getNodePath(node, e));
}
function isElement(node) {
    return node.nodeType === 1;
}
function isInspector(node) {
    return isElement(node) && node.classList.contains("observablehq");
}
function getNodePath(node, descendant) {
    const path = [];
    while (descendant !== node) {
        path.push(getChildIndex(descendant));
        descendant = descendant.parentNode;
    }
    return path.reverse();
}
function getChildIndex(node) {
    return Array.prototype.indexOf.call(node.parentNode.childNodes, node);
}
