export type DsvOptions = {
    delimiter?: string;
    array?: boolean;
    typed?: boolean;
};
export type DsvResult = any[] & {
    columns: string[];
};
export interface FileAttachment {
    name: string;
    mimeType: string;
    href: string;
    lastModified: number | undefined;
    size: number | undefined;
    url(): Promise<string>;
    blob(): Promise<Blob>;
    arrayBuffer(): Promise<ArrayBuffer>;
    text(encoding?: string): Promise<string>;
    json(): Promise<any>;
    stream(): Promise<ReadableStream<Uint8Array<ArrayBufferLike>>>;
    dsv(options?: DsvOptions): Promise<DsvResult>;
    csv(options?: Exclude<DsvOptions, "delimiter">): Promise<DsvResult>;
    tsv(options?: Exclude<DsvOptions, "delimiter">): Promise<DsvResult>;
    image(props?: Partial<HTMLImageElement>): Promise<HTMLImageElement>;
    arrow(): Promise<any>;
    arquero(options?: any): Promise<any>;
    parquet(): Promise<any>;
    xml(mimeType?: DOMParserSupportedType): Promise<Document>;
    html(): Promise<Document>;
}
export declare function FileAttachment(name: string, base?: string): FileAttachment;
export declare namespace FileAttachment {
    var prototype: FileAttachmentImpl;
}
export declare abstract class AbstractFile implements FileAttachment {
    name: string;
    mimeType: string;
    lastModified: number | undefined;
    size: number | undefined;
    abstract href: string;
    constructor(name: string, mimeType?: string, lastModified?: number, size?: number);
    url(): Promise<string>;
    blob(): Promise<Blob>;
    arrayBuffer(): Promise<ArrayBuffer>;
    text(encoding?: string): Promise<string>;
    json(): Promise<any>;
    stream(): Promise<ReadableStream<Uint8Array<ArrayBufferLike>>>;
    dsv({ delimiter, array, typed }?: {
        delimiter?: string | undefined;
        array?: boolean | undefined;
        typed?: boolean | undefined;
    }): Promise<DsvResult>;
    csv(options: Exclude<DsvOptions, "delimiter">): Promise<DsvResult>;
    tsv(options: Exclude<DsvOptions, "delimiter">): Promise<DsvResult>;
    image(props?: Partial<HTMLImageElement>): Promise<HTMLImageElement>;
    arrow(): Promise<any>;
    arquero(options?: any): Promise<any>;
    parquet(): Promise<any>;
    xml(mimeType?: DOMParserSupportedType): Promise<Document>;
    html(): Promise<Document>;
}
declare class FileAttachmentImpl extends AbstractFile {
    href: string;
    constructor(href: string, name: string, mimeType?: string, lastModified?: number, size?: number);
}
type FileResolver = (name: string) => {
    url: string;
    mimeType?: string;
} | string | null;
export declare function fileAttachments(resolve: FileResolver): (name: string) => FileAttachment;
export {};
