import type { CallExpression, MemberExpression, Node } from "acorn";
import type { ImportDefaultSpecifier, ImportSpecifier } from "acorn";
import type { Sourcemap } from "./sourcemap.js";
type NamedImportSpecifier = ImportSpecifier | ImportDefaultSpecifier;
/** Throws a syntax error if any export declarations are found. */
export declare function checkExports(body: Node, input: string): void;
/** Returns true if the body includes an import declaration. */
export declare function hasImportDeclaration(body: Node): boolean;
/** Returns true if the given node is a import.meta.resolve(â€¦) call. */
export declare function isImportMetaResolve(node: CallExpression): boolean;
/** Returns true if the given node is a import.meta.url expression. */
export declare function isImportMetaUrl(node: MemberExpression): boolean;
export type RewriteImportOptions = {
    /** If true, resolve local imports relative to document.baseURI. */
    resolveLocalImports?: boolean;
};
export declare function rewriteImportExpressions(output: Sourcemap, body: Node, { resolveLocalImports }?: RewriteImportOptions): void;
/** Note: mutates inputs! */
export declare function rewriteImportDeclarations(output: Sourcemap, body: Node, inputs: string[], { resolveLocalImports }?: RewriteImportOptions): void;
export declare function getImportedName(node: NamedImportSpecifier): string;
export {};
