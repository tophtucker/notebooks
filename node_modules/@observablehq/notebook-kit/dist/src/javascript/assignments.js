import { defaultGlobals } from "./globals.js";
import { syntaxError } from "./syntaxError.js";
import { simple } from "./walk.js";
export function checkAssignments(node, references, input) {
    function checkConst(node) {
        switch (node.type) {
            case "Identifier":
                if (references.includes(node))
                    throw syntaxError(`Assignment to external variable '${node.name}'`, node, input);
                if (defaultGlobals.has(node.name))
                    throw syntaxError(`Assignment to global '${node.name}'`, node, input);
                break;
            case "ObjectPattern":
                node.properties.forEach((node) => checkConst(node.type === "Property" ? node.value : node));
                break;
            case "ArrayPattern":
                node.elements.forEach((node) => node && checkConst(node));
                break;
            case "RestElement":
                checkConst(node.argument);
                break;
        }
    }
    function checkConstLeft({ left }) {
        checkConst(left);
    }
    function checkConstArgument({ argument }) {
        checkConst(argument);
    }
    simple(node, {
        AssignmentExpression: checkConstLeft,
        AssignmentPattern: checkConstLeft,
        UpdateExpression: checkConstArgument,
        ForOfStatement: checkConstLeft,
        ForInStatement: checkConstLeft
    });
}
